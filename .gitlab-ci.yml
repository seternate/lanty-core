workflow:
  rules:
    - if: $CI_COMMIT_BRANCH
    - if: $CI_COMMIT_TAG



variables:
  GIT_SUBMODULE_STRATEGY: recursive
  ARTIFACT_NAME: ${CI_PROJECT_NAME}-${VERSION}-${CI_COMMIT_SHORT_SHA}-${CI_JOB_NAME}

  VERSION: 0.1.0



stages:
  - build
  - build-unit-test
  - codequality
  - static-analysis
  - unit-test
  - documentation



include:
  - project: 'template/ci-cd'
    ref: main
    file:
#      - '/sast.gitlab-ci.yml'
      - '/codequality.gitlab-ci.yml'
#      - '/documentation.gitlab-ci.yml'



.build:
  image: seternate/lanty-core-library-build:1.0.0
  stage: build
  needs: []
  artifacts:
    when: on_success
    expire_in: 30d
    paths:
      - ${ARTIFACT_DIR}
    name: ${ARTIFACT_NAME}

.build-linux:
  extends: .build
  variables:
    ARTIFACT_DIR: build
    BUILD_DIR: build
  script:
    - cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=TRUE -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DBUILD_SHARED_LIBS=${BUILD_SHARED_LIBS} -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -S . -B ${BUILD_DIR} -G Ninja -DBUILD_TESTING=${BUILD_TESTING} ${CMAKE_ADDITIONAL_ARGUMENTS}
    - cmake --build ${BUILD_DIR} --config ${BUILD_TYPE} --target ${TARGET}

build-linux-static-release:
  extends: .build-linux
  variables:
    BUILD_TYPE: 'Release'
    BUILD_SHARED_LIBS: 'FALSE'
    BUILD_TESTING: 'FALSE'
    TARGET: lanty-core-library

build-linux-static-debug:
  extends: .build-linux
  variables:
    BUILD_TYPE: 'Debug'
    BUILD_SHARED_LIBS: 'FALSE'
    BUILD_TESTING: 'FALSE'
    TARGET: lanty-core-library

build-linux-shared-release:
  extends: .build-linux
  variables:
    BUILD_TYPE: 'Release'
    BUILD_SHARED_LIBS: 'TRUE'
    BUILD_TESTING: 'FALSE'
    TARGET: lanty-core-library

build-linux-shared-debug:
  extends: .build-linux
  variables:
    BUILD_TYPE: 'Debug'
    BUILD_SHARED_LIBS: 'TRUE'
    BUILD_TESTING: 'FALSE'
    TARGET: lanty-core-library



build-unit-test:
  extends: .build-linux
  stage: build-unit-test
  needs: []
  variables:
    BUILD_TYPE: 'Debug'
    BUILD_SHARED_LIBS: 'FALSE'
    BUILD_TESTING: 'TRUE'
    TARGET: lanty-core-test
  before_script:
    - export QT_QPA_PLATFORM=offscreen



unit-test:
  image: seternate/lanty-core-library-build:1.0.0
  stage: unit-test
  needs: [build-unit-test]
  variables:
    BUILD_DIR: "build"
  before_script:
    - export QT_QPA_PLATFORM=offscreen
  script:
    - cd ${BUILD_DIR}
    - ctest -j10 --output-on-failure
  artifacts:
    when: always
    expire_in: 30d
    paths:
      - ${BUILD_DIR}
    name: ${ARTIFACT_NAME}
    reports:
      junit: ${BUILD_DIR}/test/lanty-core-test-report/*

unit-test-coverage:
  image: seternate/lanty-core-library-unit-test:1.0.0
  stage: unit-test
  needs: [unit-test]
  variables:
    BUILD_TYPE: 'Debug'
    BUILD_DIR: 'build'
    BUILD_SHARED_LIBS: 'false'
    BUILD_TESTING: 'TRUE'
    COVERAGE: 'TRUE'
    TARGET: 'lanty-core-coverage-html lanty-core-coverage-cobertura lanty-core-coverage-summary'
  before_script:
    - export QT_QPA_PLATFORM=offscreen
  script:
    - cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=TRUE -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DBUILD_SHARED_LIBS=${BUILD_SHARED_LIBS} -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -S . -B ${BUILD_DIR} -G Ninja -DBUILD_TESTING=${BUILD_TESTING} -DLANTY_CORE_LLVM_COVERAGE=${COVERAGE}
    - cmake --build ${BUILD_DIR} --config ${BUILD_TYPE} --target ${TARGET}
  artifacts:
    when: on_success
    expire_in: 30d
    paths:
      - ${BUILD_DIR}/test/coverage-html
    name: ${ARTIFACT_NAME}
    reports:
      cobertura: ${BUILD_DIR}/test/coverage.xml

#
#eslint-sast:
#  rules:
#    - when: never
#
#semgrep-sast:
#  rules:
#    - when: never
#
#.cppcheck:
#  variables:
#    SUPPRESS: '--suppress=unmatchedSuppression --suppress=useStlAlgorithm:*/QGamelist.cpp --suppress=useStlAlgorithm:*/QUserlist.cpp'